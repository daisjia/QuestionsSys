// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: human.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_human_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_human_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_human_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_human_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_human_2eproto;
namespace HumanValue {
class Person;
class PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
class Result;
class ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
}  // namespace HumanValue
PROTOBUF_NAMESPACE_OPEN
template<> ::HumanValue::Person* Arena::CreateMaybeMessage<::HumanValue::Person>(Arena*);
template<> ::HumanValue::Result* Arena::CreateMaybeMessage<::HumanValue::Result>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace HumanValue {

enum Person_HumanType : int {
  Person_HumanType_Student = 0,
  Person_HumanType_Administrator = 1
};
bool Person_HumanType_IsValid(int value);
constexpr Person_HumanType Person_HumanType_HumanType_MIN = Person_HumanType_Student;
constexpr Person_HumanType Person_HumanType_HumanType_MAX = Person_HumanType_Administrator;
constexpr int Person_HumanType_HumanType_ARRAYSIZE = Person_HumanType_HumanType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Person_HumanType_descriptor();
template<typename T>
inline const std::string& Person_HumanType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Person_HumanType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Person_HumanType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Person_HumanType_descriptor(), enum_t_value);
}
inline bool Person_HumanType_Parse(
    const std::string& name, Person_HumanType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Person_HumanType>(
    Person_HumanType_descriptor(), name, value);
}
// ===================================================================

class Person :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HumanValue.Person) */ {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Person& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }
  inline void Swap(Person* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Person* New() const final {
    return CreateMaybeMessage<Person>(nullptr);
  }

  Person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HumanValue.Person";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_human_2eproto);
    return ::descriptor_table_human_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Person_HumanType HumanType;
  static constexpr HumanType Student =
    Person_HumanType_Student;
  static constexpr HumanType Administrator =
    Person_HumanType_Administrator;
  static inline bool HumanType_IsValid(int value) {
    return Person_HumanType_IsValid(value);
  }
  static constexpr HumanType HumanType_MIN =
    Person_HumanType_HumanType_MIN;
  static constexpr HumanType HumanType_MAX =
    Person_HumanType_HumanType_MAX;
  static constexpr int HumanType_ARRAYSIZE =
    Person_HumanType_HumanType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  HumanType_descriptor() {
    return Person_HumanType_descriptor();
  }
  template<typename T>
  static inline const std::string& HumanType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, HumanType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function HumanType_Name.");
    return Person_HumanType_Name(enum_t_value);
  }
  static inline bool HumanType_Parse(const std::string& name,
      HumanType* value) {
    return Person_HumanType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswdFieldNumber = 3,
    kIdFieldNumber = 2,
    kTypeFieldNumber = 4,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string passwd = 3;
  bool has_passwd() const;
  private:
  bool _internal_has_passwd() const;
  public:
  void clear_passwd();
  const std::string& passwd() const;
  void set_passwd(const std::string& value);
  void set_passwd(std::string&& value);
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  std::string* mutable_passwd();
  std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // required int32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .HumanValue.Person.HumanType type = 4 [default = Student];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::HumanValue::Person_HumanType type() const;
  void set_type(::HumanValue::Person_HumanType value);
  private:
  ::HumanValue::Person_HumanType _internal_type() const;
  void _internal_set_type(::HumanValue::Person_HumanType value);
  public:

  // @@protoc_insertion_point(class_scope:HumanValue.Person)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int type_;
  friend struct ::TableStruct_human_2eproto;
};
// -------------------------------------------------------------------

class Result :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HumanValue.Result) */ {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(nullptr);
  }

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HumanValue.Result";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_human_2eproto);
    return ::descriptor_table_human_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRspFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // required string rsp = 2;
  bool has_rsp() const;
  private:
  bool _internal_has_rsp() const;
  public:
  void clear_rsp();
  const std::string& rsp() const;
  void set_rsp(const std::string& value);
  void set_rsp(std::string&& value);
  void set_rsp(const char* value);
  void set_rsp(const char* value, size_t size);
  std::string* mutable_rsp();
  std::string* release_rsp();
  void set_allocated_rsp(std::string* rsp);
  private:
  const std::string& _internal_rsp() const;
  void _internal_set_rsp(const std::string& value);
  std::string* _internal_mutable_rsp();
  public:

  // required int32 ret = 1;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:HumanValue.Result)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rsp_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  friend struct ::TableStruct_human_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Person

// required string name = 1;
inline bool Person::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Person::has_name() const {
  return _internal_has_name();
}
inline void Person::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Person::name() const {
  // @@protoc_insertion_point(field_get:HumanValue.Person.name)
  return _internal_name();
}
inline void Person::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:HumanValue.Person.name)
}
inline std::string* Person::mutable_name() {
  // @@protoc_insertion_point(field_mutable:HumanValue.Person.name)
  return _internal_mutable_name();
}
inline const std::string& Person::_internal_name() const {
  return name_.GetNoArena();
}
inline void Person::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Person::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HumanValue.Person.name)
}
inline void Person::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HumanValue.Person.name)
}
inline void Person::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HumanValue.Person.name)
}
inline std::string* Person::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Person::release_name() {
  // @@protoc_insertion_point(field_release:HumanValue.Person.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:HumanValue.Person.name)
}

// required int32 id = 2;
inline bool Person::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Person::has_id() const {
  return _internal_has_id();
}
inline void Person::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person::id() const {
  // @@protoc_insertion_point(field_get:HumanValue.Person.id)
  return _internal_id();
}
inline void Person::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void Person::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:HumanValue.Person.id)
}

// required string passwd = 3;
inline bool Person::_internal_has_passwd() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Person::has_passwd() const {
  return _internal_has_passwd();
}
inline void Person::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Person::passwd() const {
  // @@protoc_insertion_point(field_get:HumanValue.Person.passwd)
  return _internal_passwd();
}
inline void Person::set_passwd(const std::string& value) {
  _internal_set_passwd(value);
  // @@protoc_insertion_point(field_set:HumanValue.Person.passwd)
}
inline std::string* Person::mutable_passwd() {
  // @@protoc_insertion_point(field_mutable:HumanValue.Person.passwd)
  return _internal_mutable_passwd();
}
inline const std::string& Person::_internal_passwd() const {
  return passwd_.GetNoArena();
}
inline void Person::_internal_set_passwd(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  passwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Person::set_passwd(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  passwd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HumanValue.Person.passwd)
}
inline void Person::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  passwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HumanValue.Person.passwd)
}
inline void Person::set_passwd(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  passwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HumanValue.Person.passwd)
}
inline std::string* Person::_internal_mutable_passwd() {
  _has_bits_[0] |= 0x00000002u;
  return passwd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Person::release_passwd() {
  // @@protoc_insertion_point(field_release:HumanValue.Person.passwd)
  if (!_internal_has_passwd()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return passwd_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  passwd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:HumanValue.Person.passwd)
}

// required .HumanValue.Person.HumanType type = 4 [default = Student];
inline bool Person::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Person::has_type() const {
  return _internal_has_type();
}
inline void Person::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::HumanValue::Person_HumanType Person::_internal_type() const {
  return static_cast< ::HumanValue::Person_HumanType >(type_);
}
inline ::HumanValue::Person_HumanType Person::type() const {
  // @@protoc_insertion_point(field_get:HumanValue.Person.type)
  return _internal_type();
}
inline void Person::_internal_set_type(::HumanValue::Person_HumanType value) {
  assert(::HumanValue::Person_HumanType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void Person::set_type(::HumanValue::Person_HumanType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:HumanValue.Person.type)
}

// -------------------------------------------------------------------

// Result

// required int32 ret = 1;
inline bool Result::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Result::has_ret() const {
  return _internal_has_ret();
}
inline void Result::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Result::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Result::ret() const {
  // @@protoc_insertion_point(field_get:HumanValue.Result.ret)
  return _internal_ret();
}
inline void Result::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  ret_ = value;
}
inline void Result::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:HumanValue.Result.ret)
}

// required string rsp = 2;
inline bool Result::_internal_has_rsp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Result::has_rsp() const {
  return _internal_has_rsp();
}
inline void Result::clear_rsp() {
  rsp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Result::rsp() const {
  // @@protoc_insertion_point(field_get:HumanValue.Result.rsp)
  return _internal_rsp();
}
inline void Result::set_rsp(const std::string& value) {
  _internal_set_rsp(value);
  // @@protoc_insertion_point(field_set:HumanValue.Result.rsp)
}
inline std::string* Result::mutable_rsp() {
  // @@protoc_insertion_point(field_mutable:HumanValue.Result.rsp)
  return _internal_mutable_rsp();
}
inline const std::string& Result::_internal_rsp() const {
  return rsp_.GetNoArena();
}
inline void Result::_internal_set_rsp(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rsp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Result::set_rsp(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rsp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HumanValue.Result.rsp)
}
inline void Result::set_rsp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rsp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HumanValue.Result.rsp)
}
inline void Result::set_rsp(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rsp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HumanValue.Result.rsp)
}
inline std::string* Result::_internal_mutable_rsp() {
  _has_bits_[0] |= 0x00000001u;
  return rsp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Result::release_rsp() {
  // @@protoc_insertion_point(field_release:HumanValue.Result.rsp)
  if (!_internal_has_rsp()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rsp_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_allocated_rsp(std::string* rsp) {
  if (rsp != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rsp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rsp);
  // @@protoc_insertion_point(field_set_allocated:HumanValue.Result.rsp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace HumanValue

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::HumanValue::Person_HumanType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HumanValue::Person_HumanType>() {
  return ::HumanValue::Person_HumanType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_human_2eproto
