*2
$6
SELECT
$1
0
*3
$4
sadd
$1
l
$1
l
*3
$3
set
$1
a
$1
a
*1
$7
flushdb
*10
$5
hmset
$11
user:id:123
$2
id
$3
123
$4
name
$6
jiadai
$6
passwd
$6
123456
$4
type
$1
2
*4
$4
HSET
$7
stack:5
$15
stack:5:id:5793
$14
疯狂逆置单链表
*4
$4
HSET
$8
string:4
$16
string:4:id:4049
$7
kmp算法
*4
$4
HSET
$8
string:3
$16
string:3:id:9676
$14
字符串匹配实现
*4
$4
HSET
$7
stack:4
$15
stack:4:id:8954
$18
两个栈实现一个队列
*4
$4
HSET
$7
queue:4
$15
queue:4:id:6742
$18
两个队列实现一个栈
*4
$4
HSET
$7
queue:4
$15
queue:4:id:2201
$15
判断是否是BST树
*4
$4
HSET
$6
tree:5
$14
tree:5:id:5475
$18
按之之形打印二叉树
*4
$4
HSET
$6
tree:3
$14
tree:3:id:3925
$14
层次遍历二叉树
*4
$4
HSET
$6
tree:5
$14
tree:5:id:6782
$19
红黑树和AVL树的比较
*4
$4
HSET
$6
list:2
$14
list:2:id:4957
$36
判断单链表是否是有环，并找出环的入口
*4
$4
HSET
$6
list:4
$14
list:4:id:7720
$34
判断两个单链表是否相交，并找出交点
*4
$4
HSET
$8
string:4
$16
string:4:id:7992
$8
替换空格
*4
$4
HSET
$6
tree:5
$14
tree:5:id:4181
$1
4
*4
$4
HSET
$6
tree:4
$14
tree:4:id:3115
$10
重建二叉树
*4
$4
HSET
$6
list:4
$14
list:4:id:3386
$19
链表中倒数第k个结点
*4
$4
HSET
$6
tree:5
$14
tree:5:id:2439
$10
树的子结构
*2
$6
SELECT
$1
0
*4
$4
HSET
$6
tree:2
$14
tree:2:id:5835
$14
中序遍历二叉树
*3
$4
hdel
$6
tree:5
$14
tree:5:id:4181
*1
$7
flushdb
*10
$5
hmset
$11
user:id:123
$2
id
$3
123
$4
name
$6
jiadai
$6
passwd
$6
123456
$4
type
$1
2
*4
$4
HSET
$6
list:4
$14
list:4*id:1831
$14
疯狂逆置单链表
*3
$4
hdel
$6
list:4
$14
list:4*id:1831
*4
$4
HSET
$6
list:4
$14
list:4*id:6104
$10
逆置单链表
*4
$4
HSET
$6
list:4
$13
list:4*id:100
$10
翻转单链表
*4
$4
HSET
$7
stack:2
$15
stack:2*id:9502
$10
栈实现队列
*2
$6
SELECT
$1
0
*3
$4
hdel
$6
list:4
$13
list:4*id:100
*3
$4
hdel
$6
list:4
$14
list:4*id:6104
*3
$4
hdel
$7
stack:2
$15
stack:2*id:9502
*4
$4
HSET
$6
list:4
$14
list:4*id:9027
$10
逆置单链表
*1
$7
flushdb
*4
$4
HSET
$8
string:4
$16
string:4*id:9830
$14
字符串匹配实现
*4
$4
HSET
$8
string:5
$16
string:5*id:5588
$7
kmp算法
*4
$4
HSET
$8
string:3
$15
string:3*id:964
$8
替换空格
*4
$4
HSET
$6
list:4
$14
list:4*id:8396
$36
判断单链表是否是有环，并找出环的入口
*4
$4
HSET
$6
list:3
$14
list:3*id:3588
$19
链表中倒数第k个结点
*4
$4
HSET
$6
list:4
$13
list:4*id:764
$34
判断两个单链表是否相交，并找出交点
*4
$4
HSET
$6
list:5
$14
list:5*id:7382
$10
逆置单链表
*4
$4
HSET
$7
stack:3
$15
stack:3*id:5485
$18
两个栈实现一个队列
*4
$4
HSET
$7
queue:3
$15
queue:3*id:6307
$18
两个队列实现一个栈
*4
$4
HSET
$6
tree:5
$13
tree:5*id:398
$15
判断是否是BST树
*4
$4
HSET
$6
tree:1
$14
tree:1*id:4893
$14
中序遍历二叉树
*4
$4
HSET
$6
tree:2
$14
tree:2*id:5090
$14
层次遍历二叉树
*4
$4
HSET
$6
tree:4
$14
tree:4*id:7035
$10
重建二叉树
*4
$4
HSET
$6
tree:4
$13
tree:4*id:323
$10
树的子结构
*4
$4
HSET
$6
tree:3
$14
tree:3*id:2274
$18
按之之形打印二叉树
*4
$4
HSET
$6
tree:5
$13
tree:5*id:698
$19
红黑树和AVL树的比较
*1
$7
flushdb
*4
$4
HSET
$8
string:4
$16
string:4*id:9830
$14
字符串匹配实现
*4
$4
HSET
$8
string:5
$16
string:5*id:5588
$7
kmp算法
*4
$4
HSET
$8
string:3
$15
string:3*id:964
$8
替换空格
*4
$4
HSET
$6
list:4
$14
list:4*id:8396
$36
判断单链表是否是有环，并找出环的入口
*4
$4
HSET
$6
list:3
$14
list:3*id:3588
$19
链表中倒数第k个结点
*4
$4
HSET
$6
list:4
$13
list:4*id:764
$34
判断两个单链表是否相交，并找出交点
*4
$4
HSET
$6
list:5
$14
list:5*id:7382
$10
逆置单链表
*4
$4
HSET
$7
stack:3
$15
stack:3*id:5485
$18
两个栈实现一个队列
*4
$4
HSET
$7
queue:3
$15
queue:3*id:6307
$18
两个队列实现一个栈
*4
$4
HSET
$6
tree:5
$13
tree:5*id:398
$15
判断是否是BST树
*4
$4
HSET
$6
tree:1
$14
tree:1*id:4893
$14
中序遍历二叉树
*4
$4
HSET
$6
tree:2
$14
tree:2*id:5090
$14
层次遍历二叉树
*4
$4
HSET
$6
tree:4
$14
tree:4*id:7035
$10
重建二叉树
*4
$4
HSET
$6
tree:4
$13
tree:4*id:323
$10
树的子结构
*4
$4
HSET
$6
tree:3
$14
tree:3*id:2274
$18
按之之形打印二叉树
*4
$4
HSET
$6
tree:5
$13
tree:5*id:698
$19
红黑树和AVL树的比较
*4
$4
HSET
$8
string:4
$16
string:4*id:3724
$14
字符串匹配实现
*4
$4
HSET
$8
string:5
$16
string:5*id:3048
$7
kmp算法
*4
$4
HSET
$8
string:3
$16
string:3*id:2732
$8
替换空格
*4
$4
HSET
$6
list:4
$14
list:4*id:5839
$36
判断单链表是否是有环，并找出环的入口
*4
$4
HSET
$6
list:3
$13
list:3*id:722
$19
链表中倒数第k个结点
*4
$4
HSET
$6
list:4
$14
list:4*id:5510
$34
判断两个单链表是否相交，并找出交点
*4
$4
HSET
$6
list:5
$14
list:5*id:5825
$10
逆置单链表
*4
$4
HSET
$7
stack:3
$12
stack:3*id:3
$18
两个栈实现一个队列
*4
$4
HSET
$7
queue:3
$15
queue:3*id:7222
$18
两个队列实现一个栈
*4
$4
HSET
$6
tree:5
$14
tree:5*id:9043
$15
判断是否是BST树
*4
$4
HSET
$6
tree:1
$14
tree:1*id:9676
$14
中序遍历二叉树
*4
$4
HSET
$6
tree:2
$14
tree:2*id:6227
$14
层次遍历二叉树
*4
$4
HSET
$6
tree:4
$14
tree:4*id:2205
$10
重建二叉树
*4
$4
HSET
$6
tree:4
$14
tree:4*id:5930
$10
树的子结构
*4
$4
HSET
$6
tree:3
$14
tree:3*id:7126
$18
按之之形打印二叉树
*4
$4
HSET
$6
tree:5
$14
tree:5*id:4810
$19
红黑树和AVL树的比较
*1
$7
flushdb
*4
$4
HSET
$8
string:4
$16
string:4*id:6208
$14
字符串匹配实现
*4
$4
HSET
$8
string:5
$16
string:5*id:4709
$7
kmp算法
*4
$4
HSET
$8
string:3
$16
string:3*id:9505
$8
替换空格
*4
$4
HSET
$6
list:4
$14
list:4*id:9097
$36
判断单链表是否是有环，并找出环的入口
*4
$4
HSET
$6
list:3
$14
list:3*id:8647
$19
链表中倒数第k个结点
*4
$4
HSET
$6
list:4
$14
list:4*id:9929
$34
判断两个单链表是否相交，并找出交点
*4
$4
HSET
$6
list:5
$14
list:5*id:1609
$10
逆置单链表
*4
$4
HSET
$7
stack:3
$15
stack:3*id:4182
$18
两个栈实现一个队列
*4
$4
HSET
$7
queue:3
$14
queue:3*id:681
$18
两个队列实现一个栈
*4
$4
HSET
$6
tree:5
$14
tree:5*id:1791
$15
判断是否是BST树
*4
$4
HSET
$6
tree:1
$14
tree:1*id:9736
$14
中序遍历二叉树
*4
$4
HSET
$6
tree:2
$14
tree:2*id:2983
$14
层次遍历二叉树
*4
$4
HSET
$6
tree:4
$14
tree:4*id:9307
$10
重建二叉树
*4
$4
HSET
$6
tree:4
$14
tree:4*id:2254
$10
树的子结构
*4
$4
HSET
$6
tree:3
$13
tree:3*id:873
$18
按之之形打印二叉树
*4
$4
HSET
$6
tree:5
$14
tree:5*id:9263
$19
红黑树和AVL树的比较
*1
$7
flushdb
*4
$4
HSET
$8
string:4
$16
string:4*id:5378
$14
字符串匹配实现
*4
$4
HSET
$8
string:5
$16
string:5*id:3774
$7
kmp算法
*4
$4
HSET
$8
string:3
$16
string:3*id:4423
$8
替换空格
*4
$4
HSET
$6
list:4
$14
list:4*id:4711
$36
判断单链表是否是有环，并找出环的入口
*4
$4
HSET
$6
list:3
$14
list:3*id:1853
$19
链表中倒数第k个结点
*4
$4
HSET
$6
list:4
$14
list:4*id:4605
$34
判断两个单链表是否相交，并找出交点
*4
$4
HSET
$6
list:5
$14
list:5*id:9211
$10
逆置单链表
*4
$4
HSET
$7
stack:3
$15
stack:3*id:3814
$18
两个栈实现一个队列
*4
$4
HSET
$7
queue:3
$15
queue:3*id:1468
$18
两个队列实现一个栈
*4
$4
HSET
$6
tree:5
$14
tree:5*id:1559
$15
判断是否是BST树
*4
$4
HSET
$6
tree:1
$14
tree:1*id:6173
$14
中序遍历二叉树
*4
$4
HSET
$6
tree:2
$14
tree:2*id:2880
$14
层次遍历二叉树
*4
$4
HSET
$6
tree:4
$14
tree:4*id:5667
$10
重建二叉树
*4
$4
HSET
$6
tree:4
$14
tree:4*id:4089
$10
树的子结构
*4
$4
HSET
$6
tree:3
$14
tree:3*id:4575
$18
按之之形打印二叉树
*4
$4
HSET
$6
tree:5
$14
tree:5*id:2745
$19
红黑树和AVL树的比较
*1
$7
flushdb
*4
$4
HSET
$8
string:4
$16
string:4*id:6362
$14
字符串匹配实现
*4
$4
HSET
$8
string:5
$16
string:5*id:3530
$7
kmp算法
*4
$4
HSET
$8
string:3
$16
string:3*id:6305
$8
替换空格
*4
$4
HSET
$6
list:4
$14
list:4*id:8654
$36
判断单链表是否是有环，并找出环的入口
*4
$4
HSET
$6
list:3
$14
list:3*id:3232
$19
链表中倒数第k个结点
*4
$4
HSET
$6
list:4
$14
list:4*id:2491
$34
判断两个单链表是否相交，并找出交点
*4
$4
HSET
$6
list:5
$14
list:5*id:5826
$10
逆置单链表
*4
$4
HSET
$7
stack:3
$14
stack:3*id:599
$18
两个栈实现一个队列
*4
$4
HSET
$7
queue:3
$15
queue:3*id:7657
$18
两个队列实现一个栈
*4
$4
HSET
$6
tree:5
$14
tree:5*id:4043
$15
判断是否是BST树
*4
$4
HSET
$6
tree:1
$14
tree:1*id:7769
$14
中序遍历二叉树
*4
$4
HSET
$6
tree:2
$14
tree:2*id:2057
$14
层次遍历二叉树
*4
$4
HSET
$6
tree:4
$14
tree:4*id:9790
$10
重建二叉树
*4
$4
HSET
$6
tree:4
$14
tree:4*id:1026
$10
树的子结构
*4
$4
HSET
$6
tree:3
$14
tree:3*id:5708
$18
按之之形打印二叉树
*4
$4
HSET
$6
tree:5
$14
tree:5*id:1545
$19
红黑树和AVL树的比较
*10
$5
hmset
$11
user:id:123
$2
id
$3
123
$4
name
$6
jiadai
$6
passwd
$6
123456
$4
type
$1
2
*10
$5
hmset
$11
user:id:456
$2
id
$3
456
$4
name
$6
daijia
$6
passwd
$6
123456
$4
type
$1
1
*1
$7
flushdb
*4
$4
HSET
$8
string:4
$16
string:4*id:7852
$14
字符串匹配实现
*4
$4
HSET
$8
string:5
$16
string:5*id:4370
$7
kmp算法
*4
$4
HSET
$8
string:3
$16
string:3*id:9142
$8
替换空格
*4
$4
HSET
$6
list:4
$14
list:4*id:4392
$36
判断单链表是否是有环，并找出环的入口
*4
$4
HSET
$6
list:3
$14
list:3*id:8327
$19
链表中倒数第k个结点
*4
$4
HSET
$6
list:4
$14
list:4*id:2612
$34
判断两个单链表是否相交，并找出交点
*4
$4
HSET
$6
list:5
$14
list:5*id:9711
$10
逆置单链表
*4
$4
HSET
$7
stack:3
$15
stack:3*id:7067
$18
两个栈实现一个队列
*4
$4
HSET
$7
queue:3
$15
queue:3*id:4741
$18
两个队列实现一个栈
*4
$4
HSET
$6
tree:5
$14
tree:5*id:3515
$15
判断是否是BST树
*4
$4
HSET
$6
tree:1
$14
tree:1*id:6115
$14
中序遍历二叉树
*4
$4
HSET
$6
tree:2
$14
tree:2*id:9888
$14
层次遍历二叉树
*4
$4
HSET
$6
tree:4
$14
tree:4*id:3446
$10
重建二叉树
*4
$4
HSET
$6
tree:4
$14
tree:4*id:3473
$10
树的子结构
*4
$4
HSET
$6
tree:3
$14
tree:3*id:4208
$18
按之之形打印二叉树
*4
$4
HSET
$6
tree:5
$14
tree:5*id:6163
$19
红黑树和AVL树的比较
*10
$5
hmset
$11
user:id:456
$2
id
$3
456
$4
name
$6
daijia
$6
passwd
$6
123456
$4
type
$1
1
*1
$7
flushdb
*4
$4
HSET
$8
string:4
$16
string:4*id:6612
$14
字符串匹配实现
*4
$4
HSET
$8
string:5
$16
string:5*id:2191
$7
kmp算法
*4
$4
HSET
$8
string:2
$16
string:2*id:6912
$8
替换空格
*4
$4
HSET
$8
string:4
$16
string:4*id:1501
$14
正则表达式匹配
*4
$4
HSET
$8
string:1
$16
string:1*id:1076
$16
表示数值的字符串
*4
$4
HSET
$8
string:3
$16
string:3*id:4485
$26
字符流中第一个不重复的字符
*4
$4
HSET
$8
string:4
$15
string:4*id:245
$12
字符串的排列
*4
$4
HSET
$8
string:5
$16
string:5*id:8649
$18
把数组排成最小的树
*4
$4
HSET
$6
list:4
$12
list:4*id:81
$36
判断单链表是否是有环，并找出环的入口
*4
$4
HSET
$6
list:3
$14
list:3*id:9922
$19
链表中倒数第k个结点
*4
$4
HSET
$6
list:4
$14
list:4*id:7429
$34
判断两个单链表是否相交，并找出交点
*4
$4
HSET
$6
list:3
$14
list:3*id:3864
$10
逆置单链表
*4
$4
HSET
$6
list:2
$14
list:2*id:9252
$18
从头到尾打印单链表
*4
$4
HSET
$6
list:4
$14
list:4*id:1862
$20
删除链表中重复的结点
*4
$4
HSET
$6
list:3
$14
list:3*id:5514
$18
合并两个排序的链表
*4
$4
HSET
$6
list:5
$14
list:5*id:4927
$20
二叉搜索树与双向链表
*4
$4
HSET
$7
stack:3
$15
stack:3*id:6570
$18
两个栈实现一个队列
*4
$4
HSET
$7
stack:4
$15
stack:4*id:3263
$15
包含min函数的栈
*4
$4
HSET
$7
stack:5
$14
stack:5*id:446
$18
栈的牙入、弹出序列
*4
$4
HSET
$7
queue:3
$15
queue:3*id:5195
$18
两个队列实现一个栈
*4
$4
HSET
$6
tree:5
$14
tree:5*id:4584
$15
判断是否是BST树
*4
$4
HSET
$6
tree:1
$14
tree:1*id:7796
$14
中序遍历二叉树
*4
$4
HSET
$6
tree:2
$14
tree:2*id:8190
$14
层次遍历二叉树
*4
$4
HSET
$6
tree:4
$14
tree:4*id:6689
$10
重建二叉树
*4
$4
HSET
$6
tree:4
$14
tree:4*id:3601
$10
树的子结构
*4
$4
HSET
$6
tree:3
$14
tree:3*id:8693
$18
按之之形打印二叉树
*4
$4
HSET
$6
tree:5
$13
tree:5*id:922
$19
红黑树和AVL树的比较
*4
$4
HSET
$6
tree:3
$14
tree:3*id:9856
$10
树的子结构
*4
$4
HSET
$6
tree:4
$14
tree:4*id:8080
$10
重建二叉树
*4
$4
HSET
$6
tree:5
$14
tree:5*id:1375
$18
二叉树的下一个结点
*4
$4
HSET
$6
tree:2
$14
tree:2*id:1336
$12
对称的二叉树
*4
$4
HSET
$6
tree:4
$14
tree:4*id:4693
$12
序列化二叉树
*4
$4
HSET
$6
tree:3
$14
tree:3*id:5147
$21
二叉搜索树的第k个结点
*4
$4
HSET
$6
tree:5
$14
tree:5*id:8247
$18
从上往下打印二叉树
*4
$4
HSET
$6
tree:1
$14
tree:1*id:6193
$24
二叉搜索树的后序遍历序列
*4
$4
HSET
$6
tree:3
$14
tree:3*id:7804
$24
二叉树中和为某一值的路径
*4
$4
HSET
$6
tree:4
$14
tree:4*id:4315
$12
二叉树的深度
*4
$4
HSET
$6
tree:5
$14
tree:5*id:8020
$16
二叉树的元素个数
*4
$4
HSET
$6
tree:2
$14
tree:2*id:6454
$10
平衡二叉树
*10
$5
hmset
$11
user:id:456
$2
id
$3
456
$4
name
$6
daijia
$6
passwd
$6
123456
$4
type
$1
1
*10
$5
hmset
$11
user:id:123
$2
id
$3
123
$4
name
$6
jiadai
$6
passwd
$6
123456
$4
type
$1
2
*3
$4
hdel
$6
tree:3
$14
tree:3*id:9856
*3
$4
hdel
$6
tree:4
$14
tree:4*id:8080
